#include "Include/D3D12.hlsl"
#include "Include/StdLib.cginc"
#include "Include/ExposureHistogram.hlsl"

StructuredBuffer<uint> _HistogramBuffer : register(t0, space0);
Texture2D<float> _Source : register(t1, space0);
RWTexture2D<float> _Destination[2] : register(u0, space0);

cbuffer Params : register(b0)
{
    float4 _Params1; // x: lowPercent, y: highPercent, z: minBrightness, w: maxBrightness
    float4 _Params2; // x: speed down, y: speed up, z: exposure compensation, w: delta time
    float4 _ScaleOffsetRes; // x: scale, y: offset, w: histogram pass width, h: histogram pass height
    uint _IsFixed;
};

groupshared uint gs_pyramid[HISTOGRAM_BINS];

float GetExposureMultiplier(float avgLuminance)
{
    avgLuminance = max(EPSILON, avgLuminance);
    //float keyValue = 1.03 - (2.0 / (2.0 + log2(avgLuminance + 1.0)));
    float keyValue = _Params2.z;
    float exposure = keyValue / avgLuminance;
    return exposure;
}

float InterpolateExposure(float newExposure, float oldExposure)
{
    float delta = newExposure - oldExposure;
    float speed = delta > 0.0 ? _Params2.x : _Params2.y;
    float exposure = oldExposure + delta * (1.0 - exp2(-_Params2.w * speed));
    return exposure;
}

[numthreads(HISTOGRAM_THREAD_X, HISTOGRAM_BINS / HISTOGRAM_THREAD_X, 1)]
void MAIN(uint2 groupThreadId : SV_GroupThreadID)
{
    const uint thread_id = groupThreadId.y * HISTOGRAM_THREAD_X + groupThreadId.x;
    gs_pyramid[thread_id] = _HistogramBuffer[thread_id];

    GroupMemoryBarrierWithGroupSync();

    // Parallel reduction to find the max value
    [loop]
    for (uint i = HISTOGRAM_BINS >> 1u; i > 0u; i >>= 1u)
    {
        if (thread_id < i)
            gs_pyramid[thread_id] = max(gs_pyramid[thread_id], gs_pyramid[thread_id + i]);

        GroupMemoryBarrierWithGroupSync();
    }

    GroupMemoryBarrierWithGroupSync();

    if (thread_id == 0u)
    {
        float exposure = 0;
        float maxValue = 1.0 / float(gs_pyramid[0]);
        float avgLuminance = GetAverageLuminance(_HistogramBuffer, _Params1, maxValue, _ScaleOffsetRes.xy);
        exposure = GetExposureMultiplier(avgLuminance);
        [branch]
        if(_IsFixed == 0)
        {
            float prevExposure = _Source[uint2(0u, 0u)].x;
            exposure = InterpolateExposure(exposure, prevExposure);
        }else{
            _Destination[1][uint2(0,0)] = exposure;
        }
        _Destination[0][uint2(0u, 0u)] = exposure;
    }
}