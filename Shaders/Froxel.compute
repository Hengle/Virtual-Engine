#include "Include/Sampler.cginc"
#include "Include/Lighting.cginc"
#include "Include/D3D12.hlsl"
#include "Include/StdLib.cginc"
cbuffer Per_Camera_Buffer : register(b0)
{
    float4x4 _WorldToCamera;
    float4x4 _InverseWorldToCamera;
    float4x4 _Proj;
    float4x4 _InvProj;
    float4x4 _VP;
    float4x4 _InvVP;
    float4x4 _NonJitterVP;
    float4x4 _NonJitterInverseVP;
    float4x4 _LastVP;
    float4x4 _InverseLastVP;
	float4 _RandomSeed;
    float3 worldSpaceCameraPos;
    float _NearZ;
    float _FarZ;
};

cbuffer LightCullCBuffer : register(b1)
{
    float4x4 _inverseVP;
	float4 _CameraNearPos;
	float4 _CameraFarPos;
	float4 _ZBufferParams;
	float3 _CameraForward;
	uint _LightCount;
	float3 _SunColor;
	uint _SunEnabled;
	float3 _SunDir;
	uint _SunShadowEnabled;
	uint4 _ShadowmapIndices;
	float4 _CascadeDistance;
	float4x4 _ShadowMatrix[4];
	float4 _ShadowSoftValue;
	float4 _ShadowOffset;
	uint _ReflectionProbeCount;
};

cbuffer FroxelParams : register(b2)
{
    float4 _FroxelSize;
    float4 _VolumetricLightVar;
    float4 _TemporalWeight;
    float _LinearFogDensity;
};
Texture2D<float> _GreyTex[6] : register(t0, space0);
RWTexture3D<float4> _VolumeTex : register(u0, space0);
Texture3D<float4> _LastVolume : register(t0, space1);
RWTexture3D<float4> _RWLastVolume : register(u1, space0);
#include "Include/Random.cginc"
#include "Include/SunShadow.cginc"

inline float3 repeat(float3 v, const float length)
{
    float3 left = v % length;
    return lerp( left , length - left, left < 0);
}

    inline float Luma(float3 Color)
    {
        return (Color.g * 0.5) + (Color.r + Color.b) * 0.25;
    }

    inline float2 LinearEyeDepth( float2 z )
    {
        return 1.0 / (_ZBufferParams.z * z + _ZBufferParams.w);
    }


    inline float EyeDepthToProj(float lin)
    {
        return (1/lin - _ZBufferParams.w) / _ZBufferParams.z;
    }

    
#define MieScattering(cosAngle, g) g.w * (g.x / (pow(g.y - g.z * cosAngle, 1.25)))
// x: 1 - g^2, y: 1 + g^2, z: 2*g, w: 1/4pi   g = 0.36
static const float g = 0.36;
static const float4 _MieG = float4(1 - g * g, 1 + g * g, 2 * g,0.7853981633974483);

float3 GetColor(float3 targetWorldPos, float linearDepth, float2 uv)
{
    float3 color = 0;
    float3 viewDir = normalize(worldSpaceCameraPos.xyz - targetWorldPos);
    float3 sunColor =  GetHardShadow(targetWorldPos, linearDepth, uint4(0,1,2,3)) * _SunColor * MieScattering(-dot(-_SunDir, viewDir), _MieG);
    color += sunColor;
   /* if(_LightFlag & 4)
    {
        #ifdef DIRMAP
            color.rgb += _DirLightFinalColor * GetHardShadow(targetWorldPos, linearDepth) * MieScattering(-dot(_DirLightPos, viewDir), _MieG);
        #else
            color.rgb += _DirLightFinalColor * MieScattering(-dot(_DirLightPos, viewDir), _MieG);
        #endif
    }
    float rate = pow(max(0, (linearDepth - _CameraClipDistance.x) / _CameraClipDistance.y), 1.0 / CLUSTERRATE);
    if(rate > 1) return 0;
	uint3 voxelValue = uint3((uint2)(uv * float2(XRES, YRES)), (uint)(rate * ZRES));
	uint sb = GetIndex(voxelValue, VOXELSIZE, (MAXLIGHTPERCLUSTER + 1));
	uint2 LightIndex;// = uint2(sb + 1, _PointLightIndexBuffer[sb]);
    uint c;
    if(_LightFlag & 1){
        LightIndex = uint2(sb + 1, _PointLightIndexBuffer[sb]);
        [loop]
        for (c = LightIndex.x; c < LightIndex.y; c++)
        {
            PointLight pt = _AllPointLight[_PointLightIndexBuffer[c]];
            float3 lightDir = pt.sphere.xyz - targetWorldPos;
            float lenOfLightDir = length(lightDir);
            //Cull Light
            if(lenOfLightDir > pt.sphere.w) continue;
            
            float3 currentCol = DistanceFalloff(lightDir, (1 / pt.sphere.w)) * MieScattering(dot(lightDir / lenOfLightDir, viewDir), _MieG) * pt.lightColor;
            if(dot(currentCol, 1) < 1e-5) continue;
            #ifdef CUBEMAP
            if(pt.shadowIndex >= 0){
                float shadowDist = _CubeShadowMapArray.SampleLevel(sampler_CubeShadowMapArray, float4(lightDir, pt.shadowIndex), 0);
                float lightDist = lenOfLightDir / pt.sphere.w;
                currentCol *= lightDist <= shadowDist;
            }
            #endif
            color.rgb += currentCol;
        }
    }
    if(_LightFlag & 8)
    {
        LightIndex = uint2(sb + 1, _SpotLightIndexBuffer[sb]);
        [loop]
        for (c = LightIndex.x; c < LightIndex.y; c++)
	    {
            SpotLight Light = _AllSpotLight[_SpotLightIndexBuffer[c]];
            Cone SpotCone = Light.lightCone;
            float LightRange = SpotCone.height;
            float3 LightPos = SpotCone.vertex;
            float LightAngle = Light.angle;
            float3 LightForward = SpotCone.direction;
            float3 Un_LightDir = LightPos - targetWorldPos;
            float lightDirLength = length(Un_LightDir);
            float3 lightDir = Un_LightDir / lightDirLength;
            float ldf = -dot(lightDir, LightForward);
            float2 SpotConeAngle = float2(cos(LightAngle), cos(Light.smallAngle));
            if(ldf < SpotConeAngle.x || SpotCone.height / ldf < lightDirLength) continue;
            float lightAngleScale = 1 / max ( 0.001, (SpotConeAngle.y - SpotConeAngle.x) );
            float lightAngleOffset = -SpotConeAngle.x * lightAngleScale;
            float SpotFalloff = AngleFalloff(ldf, lightAngleScale, lightAngleOffset);
		    int iesIndex = Light.iesIndex;
            if(iesIndex >= 0)
		{
			float iesUV = ComputeLightProfileMultiplier(targetWorldPos, LightPos, LightForward, LightAngle);
			Light.lightColor *= _IESAtlas.SampleLevel(sampler_IESAtlas, float3(iesUV, 0.5, iesIndex), 0);
		}
            float isNear =  dot(-Un_LightDir, SpotCone.direction) > Light.nearClip;
            float ShadowTrem = 1;
            float3 spotColor = SpotFalloff * DistanceFalloff(Un_LightDir, (1 / LightRange)) * MieScattering(-dot(lightDir, viewDir), _MieG) * Light.lightColor * isNear;
            if(dot(spotColor, 1) < 1e-5) continue;
            #ifdef SPOTMAP
            if(Light.shadowIndex >= 0)
            {
                        float4 clipPos = mul(Light.vpMatrix, float4(targetWorldPos, 1));
                        clipPos /= clipPos.w;
                        float2 uv = clipPos.xy * 0.5 + 0.5;
                        ShadowTrem = _SpotMapArray.SampleCmpLevelZero(sampler_SpotMapArray, float3(uv, Light.shadowIndex), clipPos.z);
            }
            #endif
            color.rgb += ShadowTrem * spotColor;
        }
    }
    //color.rgb *= RayleighScatter(targetWorldPos, distance(targetWorldPos, _WorldSpaceCameraPos), 1, 0.001);
   // color.rgb += GetVolumetricColor(targetWorldPos);
*/
    return min(color, 128);
}

float3 RenderVoxel(uint3 id, float3 jitterCoord, inout float3 worldPos)
{
    float2 uv = saturate(float2(id.xy + jitterCoord.xy) / _FroxelSize.xy);
    uv.y = 1 - uv.y;
    float2 projCoord = uv * 2 - 1;
    float lerpPos = (id.z+  jitterCoord.z) / _FroxelSize.z;
    float linearDepth = lerp(_VolumetricLightVar.x, _VolumetricLightVar.z, pow(lerpPos, FROXELRATE));
    float4 targetWorldPos = mul(_NonJitterInverseVP, float4(projCoord, EyeDepthToProj(linearDepth), 1));
    targetWorldPos /= targetWorldPos.w;
    worldPos += targetWorldPos.xyz;
    float3 col = GetColor(targetWorldPos.xyz, linearDepth, uv);
    return col;
}

[numthreads(2, 2, VOXELZ)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float3 value = (float3)id / _FroxelSize.xyz;
    value = MNoise(value, _RandomSeed);
    float3 sampleWorldPos = 0;
    float4 col = float4((RenderVoxel(id, value, sampleWorldPos) + RenderVoxel(id, repeat(value + 0.5, 1), sampleWorldPos)) * 0.5, 0);
    col.w = 0.001;
    sampleWorldPos *= 0.5;
    float2 uv = saturate(float2(id.xy + 0.5) / (float2)(_FroxelSize.xy));
    float2 projCoord = uv * 2 - 1;
    float lerpPos = (id.z +  0.5) / (_FroxelSize.z);
    float linearDepth = lerp(_VolumetricLightVar.x, _VolumetricLightVar.z, pow(lerpPos, FROXELRATE));
    float3 targetProjPos = float3(projCoord, EyeDepthToProj(linearDepth));
    float4 targetWorldPos = mul(_NonJitterInverseVP, float4(targetProjPos, 1));
    targetWorldPos /= targetWorldPos.w;
    float4 lastWorldPos = float4(targetWorldPos.xyz, 1);
    float4 lastFrameClip = mul(_LastVP, lastWorldPos);
    lastFrameClip /= lastFrameClip.w;
 float3 lastFrameUV = float3(lastFrameClip.xy * 0.5 + 0.5, (LinearEyeDepth(lastFrameClip.z, _ZBufferParams) - _VolumetricLightVar.x) / (_VolumetricLightVar.z - _VolumetricLightVar.x));
    lastFrameUV.z = pow(lastFrameUV.z, 1 / FROXELRATE);
     float4 lastFrameColor = _LastVolume.SampleLevel(bilinearClampSampler, lastFrameUV, 0);
    //float tWeight = lerp(_TemporalWeight.x, _TemporalWeight.y, saturate(distance(targetProjPos.xyz, lastFrameClip.xyz) * _TemporalWeight.z));
   float colDiff = Luma(col.xyz) - Luma(lastFrameColor.xyz);//Whether current Color is brighter than last
    float tWeight = lerp(_TemporalWeight.x, _TemporalWeight.y, saturate(tanh(colDiff * 2) * 0.5 + 0.5));
    float reprojectionValid = tWeight * (dot(abs(lastFrameUV - saturate(lastFrameUV)), 1) < 1e-4);
    col = lerp(col, lastFrameColor, reprojectionValid);
    col = KillNaN(col);
    _VolumeTex[id] = clamp(col, 0, 256);
}

float4 ScatterStep(float3 accumulatedLight, float accumulatedTransmittance, float3 sliceLight, float sliceDensity)
{   
	sliceDensity = max(sliceDensity, 0.000001);
	float  sliceTransmittance = exp(-sliceDensity / _FroxelSize.z);
	float3 sliceLightIntegral = sliceLight * (1.0 - sliceTransmittance) / sliceDensity;

	accumulatedLight += sliceLightIntegral * accumulatedTransmittance;
	accumulatedTransmittance *= sliceTransmittance;
	
	return float4(accumulatedLight, accumulatedTransmittance);
}

[numthreads(32, 2, 1)]
void Scatter(uint2 id : SV_DISPATCHTHREADID)
{
    float4 accum = float4(0, 0, 0, 1);
	uint3 pos = uint3(id.xy, 0);
    float lastDist = 0;
    float ite = _FroxelSize.z - 0.1;
    [loop]
	for(uint z = 0; z < ite; z++)
	{
		pos.z = z;
		float4 slice = _VolumeTex[pos];
		 float currentDist = (z + 1.0) / _FroxelSize.z;
        currentDist = pow(currentDist, FROXELRATE) * _VolumetricLightVar.z;
        slice *= (currentDist - lastDist) * _FroxelSize.z;
		accum = ScatterStep(accum.rgb, accum.a, slice.rgb, slice.a);
        lastDist = currentDist;
		_VolumeTex[pos] = accum;
	}
}

[numthreads(2, 2, VOXELZ)]
void Clear (uint3 id : SV_DispatchThreadID)
{
    _VolumeTex[id] = float4(1, 1, 1, 0);
}

[numthreads(2, 2, VOXELZ)]
void Copy (uint3 id : SV_DispatchThreadID)
{
    _RWLastVolume[id] = _VolumeTex[id];
}